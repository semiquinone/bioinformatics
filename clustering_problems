import copy
import random
import math

def compute_distance(m,point1,point2):
    aa=sum([(point2[i]-point1[i])**2 for i in range(m) ]   )
    return aa

print(1/compute_distance(2,(5,2),(5,4)))
print(1/compute_distance(2,(5,2),(3,5)))


def farthest_first_traversal(k,m,data_points):
    centers=[data_points[0]]
    while len(centers)<k:
        h_distance=0; candidate=""
        for point in data_points:
            if point in centers:
                continue
            distance=min([compute_distance(m,center,point) for center in centers]    )
            if distance>h_distance:
                h_distance=distance
                candidate=point
        centers.append(candidate)
    return centers


'''aaa="""""".split("\n")
aaa=[[float(p)    for p in point.split()] for point in aaa]
farthest_first_traversal(4,2,aaa)'''

def squared_error_distortion_problem(m,inp):
    inp=inp.split("--------")
    inp=[i.strip() for i in inp]
    centers=[[float(i) for i in center.split() ] for center in inp[0].split("\n")  ]
    points=[[float(i) for i in center.split() ] for center in inp[1].split("\n")  ]
    sqr_error=0
    for point in points:
        c="";l_dis=math.inf
        for center in centers:
            dis=compute_distance(m,center,point)
            if dis<l_dis:
                l_dis=dis
                c=center
        sqr_error+=l_dis**2
    n=sqr_error/len(points)
    print(n)



def Lloyd_algorithm(k,m,points):
    points=points.split("\n")
    points = [[float(p) for p in point.split()] for point in points]
    centers=farthest_first_traversal(k,m,points)
    centers=points[:k]
    centers=[tuple(i) for i in centers]

    while True:
        group={i:[] for i in centers}
        for point in points:
            l_dis=math.inf;c=None
            for n in range(k):
                dis=compute_distance(m,point,centers[n])**2
                if dis<l_dis:
                    l_dis=dis
                    c=centers[n]
            group[c].append(point)
        new_centers=[]

        for center in centers:
            ss=[]
            n=len(group[center])
            for index in range(m):
                summ=sum([group[center][point][index] for point in range(len(group[center]))])
                ss.append(float("  %0.3f" % (summ/n) ))
            new_centers.append(tuple(ss))
        assert len(new_centers)==len(centers)
        for i in centers:
            if i not in new_centers:
                centers=copy.deepcopy(new_centers)
                break
        else:
            for i in new_centers:
                i=[str(j) for j in i]
                print(" ".join(i))
            break


def expectation_maximization_algorithm(k,m,B,Data):
    def compute_hiddenmatrix(k,m,B,data,centers,n):
        matrix=[[0 for i in range(n)] for j in range(k)]
        for num in range(n):
            allcenters=sum([pow(e,-B*compute_distance(m,center,data[num])) for center in centers  ])
            for i in range(k):
                matrix[i][num]=pow(e,-B*compute_distance(m,centers[i],data[num]))/allcenters
        return matrix

    def compute_centers(k,m,data,matrix,n):
        new_centers=[[] for i in range(k)]
        for pos in range(m):
            for c in range(k):
                numerator=sum([data[i][pos]*matrix[c][i] for i in range(n)  ])
                denominator=sum(matrix[c])
                new_centers[c].append(numerator/denominator)
        return new_centers

    e=2.718281828
    Data = Data.split("\n")
    Data = [[float(p) for p in point.split()] for point in Data]
    n=len(Data)
    centers=[Data[i] for i in range(k) ]
    matrix=compute_hiddenmatrix(k,m,B,Data,centers,n)
    count=0
    while count<100:
        count+=1
        centers=compute_centers(k,m,Data,matrix,n)
        matrix=compute_hiddenmatrix(k,m,B,Data,centers,n)
    centers=[[round(d,3) for d in j] for j in centers]
    for i in centers:
        for point in i:
            print(point,end=" ")
        print()

#expectation_maximization_algorithm(7,5,1.3,aaa)


def hierarchical_clustering(n,matrix):
    matrix=[[float(i) for i in j.split()] for j in matrix.split("\n")]
    matrix={i+1:{j+1:matrix[i][j] for j in range(n)} for i in range(n)}
    members={i+1:1 for i in range(n)}
    for_print = {i:i for i in matrix.keys()}
    while len(matrix)!=1 :
        mini=math.inf; r=c=None
        for row in matrix.keys():
            for column in matrix[row].keys():
                if matrix[row][column]<mini and row!=column:
                    mini=matrix[row][column]
                    r=row;c=column
        print(for_print[c],for_print[r])
        matrix[(r,c)]={}
        members[(r,c)]=members[r]+members[c]
        for_print[(r,c)]="{} {}".format(for_print[r],for_print[c])
        for row in matrix.keys():
            if row==c or row==r or row==(r,c):
                continue
            distance=(members[r]*matrix[row][r]+members[c]*matrix[row][c])/(members[r]+members[c])
            matrix[row].pop(c); matrix[row].pop(r)
            matrix[(r,c)][row]=matrix[row][(r,c)]=distance
        matrix.pop(c); matrix.pop(r)



if __name__="__main__":
    
		aa=[ (2, 6), (4, 9), (5, 7), (6, 5), (8, 3)]
		bb=[ (4, 5), (7, 4)]
		ss=0
		for a in aa:
    		c1,c2=bb
    		dis1=compute_distance(2,a,c1)
    		dis2 = compute_distance(2, a, c2)
    		dis=min(dis1,dis2)
    		if dis>ss:
       		 ss=dis
		print(ss)'''
		
		
		ddd="""2.31 4.55
		5.96 9.08
		--------
		3.42 6.03
		6.23 8.25
		4.76 1.64
		4.47 4.33
		3.95 7.61
		8.93 2.97
		9.74 4.03
		1.73 1.28
		9.72 5.01
		7.27 3.77"""
		squared_error_distortion_problem(4,ddd)
		
		aaa="""0.00 0.74 0.85 0.54 0.83 0.92 0.89
		0.74 0.00 1.59 1.35 1.20 1.48 1.55
		0.85 1.59 0.00 0.63 1.13 0.69 0.73
		0.54 1.35 0.63 0.00 0.66 0.43 0.88
		0.83 1.20 1.13 0.66 0.00 0.72 0.55
		0.92 1.48 0.69 0.43 0.72 0.00 0.80
		0.89 1.55 0.73 0.88 0.55 0.80 0.00"""
		hierarchical_clustering(7,aaa)
